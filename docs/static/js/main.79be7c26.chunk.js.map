{"version":3,"sources":["store/utility.js","store/is-empty.js","store/reducers/auth.js","store/actions/actionTypes.js","store/reducers/cart.js","store/reducers/index.js","store.js","store/actions/auth.js","store/actions/index.js","store/actions/cart.js","components/Navigation.js","pages/Homepage.js","services/products.js","App.js","serviceWorker.js","index.js"],"names":["updateObject","oldObject","updatedValues","setAuthToken","token","axios","defaults","headers","common","isEmpty","value","undefined","Object","keys","length","trim","initialState","isAuth","reducer","state","action","type","data","payload","isAdmin","user","cart","cartIds","map","item","id","indexOf","push","filter","rootReducer","combineReducers","auth","authReducer","cartReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","setCurrentUser","decoded","actions","logoutUser","history","dispatch","localStorage","removeItem","login","email","password","authData","post","then","res","setItem","jwtdecode","err","updateCart","clearCart","removeFromCart","useStyles","makeStyles","theme","icon","marginRight","spacing","Navigation","props","classes","Fragment","AppBar","position","Toolbar","className","style","backgroundColor","onClick","openCart","cursor","Typography","variant","color","noWrap","fontSize","Badge","badgeContent","anchorOrigin","vertical","horizontal","ShoppingCart","to","activeStyle","fontWeight","ViewList","Copyright","align","Date","getFullYear","heroContent","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","width","border","boxShadow","shadows","justifyContent","alignItems","overflow","maxHeight","list","fullList","cartCard","modalItem","borderRadius","connect","products","removeCartItem","useState","modal","setModal","loading","setLoading","orderProducts","setOrderProducts","order","setOrder","productInfo","setProductInfo","useQuery","queryKey","queryFn","a","Promise","resolve","reject","get","catch","config","onSuccess","onError","productStatus","status","cartMapped","quantity","useMutation","takeOrder","takeTheOrder","takingOrder","CssBaseline","Modal","open","onClose","aria-labelledby","aria-describedby","textAlign","gutterBottom","component","margin","name","address","phoneNumber","marginBottom","i","title","price","toFixed","reduce","acc","val","Button","initialValues","onSubmit","values","validationSchema","Yup","shape","required","touched","errors","handleChange","handleBlur","handleSubmit","response","Form","FormGroup","Label","for","Input","onChange","onBlur","ModalFooter","disabled","Spinner","Grid","container","src","imageUrl","alt","float","Cancel","htmlColor","Add","Remove","size","SwipeableDrawer","anchor","onOpen","xs","sm","md","lg","Card","CardMedia","image","CardContent","Container","maxWidth","paragraph","product","key","description","CardActions","App","path","Homepage","Boolean","location","hostname","match","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.79be7c26.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const updateObject = (oldObject, updatedValues) => {\n    return {\n        ...oldObject,\n        ...updatedValues,\n    }\n}\n\nexport const setAuthToken = (token) => {\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n    } else {\n        delete axios.defaults.headers.common['Authorization']\n    }\n}\n","const isEmpty = (value) => {\n    return (\n        value === undefined ||\n        value === null ||\n        (typeof value === 'object' && Object.keys(value).length === 0) ||\n        (typeof value === 'string' && value.trim().length === 0)\n    );\n}\nexport default isEmpty;","import { updateObject } from '../utility';\nimport * as actionTypes from '../actions/actionTypes';\nimport isEmpty from '../is-empty';\n\nconst initialState = {\n    isAuth: false\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_SUCCESS:\n            return updateObject(state, action.data);\n        case actionTypes.SET_CURRENT_USER:\n            return updateObject(state, {\n                isAuth: !isEmpty(action.payload),\n                isAdmin: action.payload.isAdmin || false,\n                user: action.payload\n            });\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","export const AUTH_SUCCESS = 'AUTH_SUCCESS'\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER'\nexport const UPDATE_CART = 'UPDATE_CART'\nexport const CLEAR_CART = 'CLEAR_CART'\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART'\n","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    cart: [],\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.UPDATE_CART:\n            const cartIds = state.cart.map((item) => item.id)\n            if (cartIds.indexOf(action.payload.id) < 0) {\n                state.cart.push(action.payload)\n            } else {\n                state = {\n                    cart: state.cart.filter(\n                        (item) => item.id !== action.payload.id\n                    ),\n                }\n                state.cart.push(action.payload)\n            }\n            return state\n        case actionTypes.CLEAR_CART:\n            state = {\n                cart: [],\n            }\n            return state\n        case actionTypes.REMOVE_FROM_CART:\n            state = {\n                cart: state.cart.filter(\n                    (item) => item.id !== action.payload.id\n                ),\n            }\n            return state\n        default:\n            return state\n    }\n}\n\nexport default reducer\n","import { combineReducers } from 'redux'\nimport authReducer from './auth'\nimport cartReducer from './cart'\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    cart: cartReducer,\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './store/reducers'\n\nconst composeEnhancers =\n    (typeof window !== 'undefined' &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nexport default store\n","import * as actionTypes from './actionTypes'\nimport axios from 'axios'\nimport { setAuthToken } from '../utility'\nimport jwtdecode from 'jwt-decode'\n\nexport const authSuccess = (authData) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        data: authData,\n    }\n}\n\nexport const logoutUser = (history) => (dispatch) => {\n    localStorage.removeItem('token')\n    setAuthToken(false)\n    dispatch(setCurrentUser({}))\n}\n\nexport const setCurrentUser = (decoded) => {\n    return {\n        type: actionTypes.SET_CURRENT_USER,\n        payload: decoded,\n    }\n}\n\nexport const login = (email, password) => {\n    return (dispatch) => {\n        const authData = {\n            email: email,\n            password: password,\n        }\n        axios.post('/login', authData).then((res) => {\n            const { token } = res.data\n            localStorage.setItem('token', token)\n            setAuthToken(token)\n            try {\n                const decoded = jwtdecode(token)\n                dispatch(setCurrentUser(decoded))\n            } catch (err) {\n                dispatch(setCurrentUser({}))\n            }\n        })\n    }\n}\n","import { logoutUser, login, setCurrentUser } from './auth'\n\nimport { updateCart, clearCart, removeFromCart } from './cart'\n\nconst actions = {\n    logoutUser,\n    login,\n    setCurrentUser,\n    updateCart,\n    clearCart,\n    removeFromCart,\n}\n\nexport default actions\n","import * as actionTypes from './actionTypes'\n\nexport const updateCart = (data) => {\n    return {\n        type: actionTypes.UPDATE_CART,\n        payload: data,\n    }\n}\n\nexport const removeFromCart = (data) => {\n    return {\n        type: actionTypes.REMOVE_FROM_CART,\n        payload: data,\n    }\n}\n\nexport const clearCart = () => {\n    return {\n        type: actionTypes.CLEAR_CART,\n    }\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { AppBar, Toolbar, Typography, Badge } from '@material-ui/core'\nimport { ShoppingCart, ViewList } from '@material-ui/icons'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        marginRight: theme.spacing(1),\n    },\n}))\n\nconst Navigation = (props) => {\n    const classes = useStyles()\n\n    return (\n        <React.Fragment>\n            <AppBar position=\"relative\">\n                <Toolbar\n                    className=\"justify-content-end\"\n                    style={{ backgroundColor: '#ff8700' }}\n                >\n                    {/* <NavLink\n                        exact\n                        to=\"/\"\n                        className=\"nav-link\"\n                        activeStyle={{\n                            fontWeight: 'bold',\n                            color: '#ff8888',\n                        }}\n                    >\n                        <Typography\n                            variant=\"caption\"\n                            color=\"inherit\"\n                            noWrap\n                            className=\"align-items-center\"\n                            style={{ fontSize: 14 }}\n                        >\n                            <Home className={classes.icon} />\n                            <span>Homepage</span>\n                        </Typography>\n                    </NavLink> */}\n                    <span\n                        onClick={props.openCart}\n                        className=\"nav-link\"\n                        style={{ cursor: 'pointer' }}\n                    >\n                        <Typography\n                            variant=\"caption\"\n                            color=\"inherit\"\n                            noWrap\n                            className=\"align-items-center\"\n                            style={{ fontSize: 14 }}\n                        >\n                            <Badge\n                                badgeContent={props.cart.length}\n                                color=\"secondary\"\n                                anchorOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'left',\n                                }}\n                            >\n                                <ShoppingCart className={classes.icon} />\n                            </Badge>\n                            <span>Cart</span>\n                        </Typography>\n                    </span>\n                    {props.isAuth && (\n                        <NavLink\n                            to=\"/orders\"\n                            className=\"nav-link\"\n                            activeStyle={{\n                                fontWeight: 'bold',\n                                color: '#ff8888',\n                            }}\n                        >\n                            <Typography\n                                variant=\"caption\"\n                                color=\"inherit\"\n                                noWrap\n                                className=\"align-items-center\"\n                                style={{ fontSize: 14 }}\n                            >\n                                <ViewList className={classes.icon} />\n                                <span>Orders</span>\n                            </Typography>\n                        </NavLink>\n                    )}\n                    {/* <NavLink\n                        to=\"/login\"\n                        className=\"nav-link\"\n                        activeStyle={{\n                            fontWeight: 'bold',\n                            color: '#ff8888',\n                        }}\n                    >\n                        <Typography\n                            variant=\"caption\"\n                            color=\"inherit\"\n                            noWrap\n                            className=\"align-items-center\"\n                            style={{ fontSize: 14 }}\n                        >\n                            <Laptop className={classes.icon} />\n                            <span>Login</span>\n                        </Typography>\n                    </NavLink> */}\n                </Toolbar>\n            </AppBar>\n        </React.Fragment>\n    )\n}\n\nexport default Navigation\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from 'react-query'\nimport { connect } from 'react-redux'\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardMedia,\n    CssBaseline,\n    Grid,\n    Typography,\n    Container,\n    SwipeableDrawer,\n    Modal,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Remove as RemoveIcon,\n    Add as AddIcon,\n    Cancel as CancelIcon,\n} from '@material-ui/icons'\nimport { getProducts, takeOrder } from '../services/products'\nimport actions from '../store/actions/index'\nimport Navigation from '../components/Navigation'\nimport { ModalFooter, Form, Input, Label, FormGroup, Spinner } from 'reactstrap'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            {/* <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Your Website\n            </Link>{' '} */}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        marginRight: theme.spacing(1),\n    },\n    heroContent: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(8, 0, 6),\n    },\n    heroButtons: {\n        marginTop: theme.spacing(4),\n    },\n    cardGrid: {\n        paddingTop: theme.spacing(8),\n        paddingBottom: theme.spacing(8),\n    },\n    card: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    cardMedia: {\n        paddingTop: '56.25%', // 16:9\n    },\n    cardContent: {\n        flexGrow: 1,\n    },\n    footer: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(6),\n    },\n    paper: {\n        position: 'absolute',\n        width: '80%',\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 8, 3),\n        justifyContent: 'center',\n        alignItems: 'stretch',\n        flexDirection: 'column',\n        overflow: 'auto',\n        maxHeight: '500px',\n    },\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n    cartCard: {\n        display: 'flex',\n    },\n    modalItem: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexGrow: 1,\n        border: '1px solid black',\n        padding: '8px 15px',\n        borderRadius: '5px',\n    },\n}))\n\nconst Homepage = (props) => {\n    const [modal, setModal] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const [orderProducts, setOrderProducts] = useState(false)\n    const [order, setOrder] = useState(null)\n    const [productInfo, setProductInfo] = useState(null)\n    const classes = useStyles()\n\n    const { data: products, status: productStatus } = useQuery({\n        queryKey: 'products',\n        queryFn: async () => await getProducts(),\n        config: {\n            onSuccess: (data) => {\n                setLoading(false)\n            },\n            onError: (err) => {\n                setLoading(false)\n            },\n        },\n    })\n\n    const cartMapped = props.cart.map((item) => ({\n        id: item.id,\n        quantity: item.quantity,\n    }))\n\n    const [takeTheOrder, takingOrder] = useMutation(\n        (data) => takeOrder({ ...data, products: cartMapped }),\n        {\n            onSuccess: () => {\n                setModal(false)\n                setProductInfo(false)\n            },\n            onError: () => {\n                setLoading(false)\n            },\n        }\n    )\n\n    return (\n        <React.Fragment>\n            <Navigation {...props} openCart={() => setModal(true)} />\n            <CssBaseline />\n            <main>\n                {/* Hero unit */}\n                <Modal\n                    open={!!orderProducts}\n                    onClose={() => setOrderProducts(null)}\n                    aria-labelledby=\"simple-modal-title\"\n                    aria-describedby=\"simple-modal-description\"\n                    style={{\n                        display: 'flex',\n                        flexGrow: 1,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                    }}\n                >\n                    {takingOrder.status === 'success' ? (\n                        <div\n                            style={{\n                                backgroundColor: 'white',\n                                textAlign: 'center',\n                                padding: '48px',\n                            }}\n                        >\n                            <Typography\n                                gutterBottom\n                                variant=\"h5\"\n                                component=\"h2\"\n                            >\n                                Taking the order was successful!\n                            </Typography>\n                            <Typography>Your order:</Typography>\n                            <p style={{ margin: '0' }}>\n                                Name: {order && order.name}\n                            </p>\n                            <p style={{ margin: '0' }}>\n                                Address: {order && order.address}\n                            </p>\n                            <p style={{ margin: '0' }}>\n                                Phone number: {order && order.phoneNumber}\n                            </p>\n                            <div\n                                style={{\n                                    maxHeight: '400px',\n                                    overflow: 'auto',\n                                    marginBottom: '16px',\n                                }}\n                            >\n                                <p\n                                    style={{\n                                        marginBottom: '0',\n                                        marginTop: '16px',\n                                    }}\n                                >\n                                    Products:\n                                </p>\n                                {props.cart.map((item, i) => (\n                                    <div className={classes.modalItem}>\n                                        <div>\n                                            <p style={{ margin: '0' }}>\n                                                {item.title}\n                                            </p>\n                                            <p style={{ margin: '0' }}>\n                                                {item.quantity} x ${item.price}{' '}\n                                                = $\n                                                {(\n                                                    item.quantity * item.price\n                                                ).toFixed(2)}\n                                            </p>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                            <div>\n                                {props.cart.length > 1\n                                    ? `Total: ${props.cart\n                                          .reduce((acc, val) => {\n                                              return (\n                                                  acc.price * acc.quantity +\n                                                  val.price * val.quantity\n                                              )\n                                          })\n                                          .toFixed(2)} + $10 (shipping) = ${(\n                                          props.cart.reduce((acc, val) => {\n                                              return (\n                                                  acc.price * acc.quantity +\n                                                  val.price * val.quantity\n                                              )\n                                          }) + 10\n                                      ).toFixed(2)}`\n                                    : `Total: ${(\n                                          props.cart[0].price *\n                                          props.cart[0].quantity\n                                      ).toFixed(2)} + $10 (shipping) = ${(\n                                          props.cart[0].price *\n                                              props.cart[0].quantity +\n                                          10\n                                      ).toFixed(2)}`}\n                            </div>\n                            <Button\n                                color=\"secondary\"\n                                onClick={() => {\n                                    setOrderProducts(null)\n                                    props.clearCart()\n                                }}\n                            >\n                                Close\n                            </Button>\n                        </div>\n                    ) : takingOrder.status !== 'loading' ? (\n                        <Formik\n                            initialValues={{\n                                name: '',\n                                address: '',\n                                phoneNumber: '',\n                            }}\n                            onSubmit={async (values, actions) => {\n                                setOrder({ ...values, products: props.cart })\n                                takeTheOrder(values)\n                            }}\n                            validationSchema={Yup.object().shape({\n                                name: Yup.string().required(),\n                                address: Yup.string().required(),\n                                phoneNumber: Yup.string().required(),\n                            })}\n                        >\n                            {(props) => {\n                                const {\n                                    values,\n                                    touched,\n                                    errors,\n                                    handleChange,\n                                    handleBlur,\n                                    handleSubmit,\n                                } = props\n                                const { response } = errors\n                                return (\n                                    <Form\n                                        onSubmit={handleSubmit}\n                                        style={{\n                                            padding: '24px',\n                                            backgroundColor: 'white',\n                                        }}\n                                    >\n                                        <FormGroup>\n                                            <Label for={'name'}>Name</Label>\n                                            <Input\n                                                name=\"name\"\n                                                type=\"text\"\n                                                value={values.name}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                            {errors.name && touched.name && (\n                                                <div\n                                                    style={{\n                                                        color: 'orangered',\n                                                    }}\n                                                >\n                                                    {errors.name}\n                                                </div>\n                                            )}\n                                        </FormGroup>\n                                        <FormGroup>\n                                            <Label for={'address'}>\n                                                Address\n                                            </Label>\n                                            <Input\n                                                name=\"address\"\n                                                type=\"text\"\n                                                value={values.address}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                            {errors.address && touched.address && (\n                                                <div\n                                                    style={{\n                                                        color: 'orangered',\n                                                    }}\n                                                >\n                                                    {errors.address}\n                                                </div>\n                                            )}\n                                        </FormGroup>\n                                        <FormGroup>\n                                            <Label for={'phoneNumber'}>\n                                                Phone number\n                                            </Label>\n                                            <Input\n                                                name=\"phoneNumber\"\n                                                type=\"text\"\n                                                value={values.phoneNumber}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                            {errors.phoneNumber &&\n                                                touched.phoneNumber && (\n                                                    <div\n                                                        style={{\n                                                            color: 'orangered',\n                                                        }}\n                                                    >\n                                                        {errors.phoneNumber}\n                                                    </div>\n                                                )}\n                                        </FormGroup>\n                                        {response && (\n                                            <div style={{ color: 'orangered' }}>\n                                                {response}\n                                            </div>\n                                        )}\n                                        <ModalFooter>\n                                            <Button\n                                                color=\"primary\"\n                                                onClick={handleSubmit}\n                                                disabled={loading}\n                                            >\n                                                Order!\n                                            </Button>{' '}\n                                            <Button\n                                                color=\"secondary\"\n                                                onClick={() =>\n                                                    setOrderProducts(false)\n                                                }\n                                                disabled={loading}\n                                            >\n                                                Cancel\n                                            </Button>\n                                        </ModalFooter>\n                                    </Form>\n                                )\n                            }}\n                        </Formik>\n                    ) : takingOrder.status === 'loading' ? (\n                        <div\n                            style={{\n                                backgroundColor: 'white',\n                                height: '200px',\n                                width: '200px',\n                                display: 'flex',\n                                justifyContent: 'center',\n                                alignItems: 'center',\n                            }}\n                        >\n                            <Spinner color=\"danger\" />\n                        </div>\n                    ) : null}\n                </Modal>\n                <Modal\n                    open={modal}\n                    onClose={() => setModal(!modal)}\n                    aria-labelledby=\"simple-modal-title\"\n                    aria-describedby=\"simple-modal-description\"\n                    style={{\n                        display: 'flex',\n                        flexGrow: 1,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Grid container className={classes.paper}>\n                        {props.cart.length > 0 ? (\n                            props.cart.map((item, i) => (\n                                <div className={classes.modalItem}>\n                                    <div>\n                                        <img\n                                            src={item.imageUrl}\n                                            alt=\"image\"\n                                            style={{\n                                                height: '100px',\n                                                float: 'right',\n                                                marginRight: '24px',\n                                            }}\n                                        />\n                                    </div>\n                                    <div>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                alignItems: 'center',\n                                            }}\n                                        >\n                                            <Typography\n                                                gutterBottom\n                                                variant=\"h5\"\n                                                component=\"h2\"\n                                                style={{\n                                                    display: 'inline-block',\n                                                    margin: '0',\n                                                    marginRight: '16px',\n                                                }}\n                                            >\n                                                {item.title}\n                                            </Typography>\n                                            <span\n                                                onClick={() =>\n                                                    props.removeCartItem(item)\n                                                }\n                                                style={{ cursor: 'pointer' }}\n                                            >\n                                                <CancelIcon htmlColor=\"#f50057\" />\n                                            </span>\n                                        </div>\n                                        <p>\n                                            {item.quantity} x ${item.price} = $\n                                            {(\n                                                item.quantity * item.price\n                                            ).toFixed(2)}\n                                        </p>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                justifyContent: 'space-between',\n                                                width: '100px',\n                                            }}\n                                        >\n                                            <span\n                                                component=\"span\"\n                                                style={{\n                                                    cursor: 'pointer',\n                                                    textAlign: 'center',\n                                                    marginRight: '12px',\n                                                }}\n                                                onClick={() => {\n                                                    const quantity =\n                                                        item.quantity + 1\n                                                    props.updateCart({\n                                                        ...item,\n                                                        quantity,\n                                                    })\n                                                }}\n                                            >\n                                                <AddIcon color=\"primary\" />\n                                            </span>\n                                            <span\n                                                style={{\n                                                    display: 'flex',\n                                                    justifyContent: 'center',\n                                                    alignItems: 'center',\n                                                    marginRight: '12px',\n                                                }}\n                                            >\n                                                {item.quantity}\n                                            </span>\n                                            <span\n                                                style={{\n                                                    cursor: 'pointer',\n                                                    textAlign: 'center',\n                                                }}\n                                                onClick={() => {\n                                                    const quantity =\n                                                        item.quantity - 1\n                                                    if (quantity >= 1) {\n                                                        props.updateCart({\n                                                            ...item,\n                                                            quantity,\n                                                        })\n                                                    }\n                                                }}\n                                            >\n                                                <RemoveIcon color=\"primary\" />\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                            ))\n                        ) : (\n                            <div className={classes.modalItem}>\n                                No items in cart\n                            </div>\n                        )}\n                        {props.cart.length > 0 ? (\n                            <div\n                                style={{\n                                    textAlign: 'center',\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    alignItems: 'center',\n                                }}\n                            >\n                                <div>Shipping: $10</div>\n                                <div\n                                    className={classes.modalItem}\n                                    style={{\n                                        width: '350px',\n                                    }}\n                                >\n                                    {props.cart.length > 1\n                                        ? `Total: ${props.cart\n                                              .reduce((acc, val) => {\n                                                  return (\n                                                      acc.price * acc.quantity +\n                                                      val.price * val.quantity\n                                                  )\n                                              })\n                                              .toFixed(\n                                                  2\n                                              )} + $10 (shipping) = ${(\n                                              props.cart.reduce((acc, val) => {\n                                                  return (\n                                                      acc.price * acc.quantity +\n                                                      val.price * val.quantity\n                                                  )\n                                              }) + 10\n                                          ).toFixed(2)}`\n                                        : `Total: ${(\n                                              props.cart[0].price *\n                                              props.cart[0].quantity\n                                          ).toFixed(2)} + $10 (shipping) = ${(\n                                              props.cart[0].price *\n                                                  props.cart[0].quantity +\n                                              10\n                                          ).toFixed(2)}`}\n                                </div>\n                            </div>\n                        ) : null}\n                        <div\n                            style={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                paddingTop: '12px',\n                                paddingBottom: '12px',\n                            }}\n                        >\n                            {props.cart.length > 0 ? (\n                                <Button\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    size=\"large\"\n                                    onClick={() => setOrderProducts(true)}\n                                    style={{ marginRight: '16px' }}\n                                >\n                                    Take an order\n                                </Button>\n                            ) : null}\n                            <Button\n                                variant=\"outlined\"\n                                color=\"secondary\"\n                                size=\"large\"\n                                onClick={() => setModal(false)}\n                            >\n                                Close\n                            </Button>\n                        </div>\n                    </Grid>\n                </Modal>\n                <SwipeableDrawer\n                    anchor={'bottom'}\n                    open={!!productInfo}\n                    onClose={() => setProductInfo(null)}\n                    onOpen={() => setProductInfo(productInfo)}\n                >\n                    <div\n                        component=\"children\"\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'center',\n                            padding: '12px',\n                        }}\n                    >\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\n                            <Card\n                                className={classes.card}\n                                // style={{ padding: '12px' }}\n                            >\n                                <CardMedia\n                                    className={classes.cardMedia}\n                                    image={\n                                        productInfo ? productInfo.imageUrl : '/'\n                                    }\n                                    title=\"Pizza\"\n                                />\n                                <CardContent className={classes.cardContent}>\n                                    <Typography\n                                        gutterBottom\n                                        variant=\"h5\"\n                                        component=\"h2\"\n                                    >\n                                        {productInfo && productInfo.title}\n                                    </Typography>\n                                    <div\n                                        style={{\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            justifyContent: 'space-between',\n                                        }}\n                                    >\n                                        <Typography>\n                                            {productInfo && productInfo.price}\n                                        </Typography>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                justifyContent: 'space-between',\n                                            }}\n                                        >\n                                            <span\n                                                component=\"span\"\n                                                style={{\n                                                    cursor: 'pointer',\n                                                    textAlign: 'center',\n                                                    marginRight: '12px',\n                                                }}\n                                                onClick={() => {\n                                                    const quantity =\n                                                        productInfo.quantity + 1\n                                                    setProductInfo({\n                                                        ...productInfo,\n                                                        quantity,\n                                                    })\n                                                }}\n                                            >\n                                                <AddIcon color=\"primary\" />\n                                            </span>\n                                            <span\n                                                style={{\n                                                    display: 'flex',\n                                                    justifyContent: 'center',\n                                                    alignItems: 'center',\n                                                    marginRight: '12px',\n                                                }}\n                                            >\n                                                {productInfo &&\n                                                    productInfo.quantity}\n                                            </span>\n                                            <span\n                                                style={{\n                                                    cursor: 'pointer',\n                                                    textAlign: 'center',\n                                                }}\n                                                onClick={() => {\n                                                    const quantity =\n                                                        productInfo.quantity - 1\n                                                    if (quantity >= 1) {\n                                                        setProductInfo({\n                                                            ...productInfo,\n                                                            quantity,\n                                                        })\n                                                    }\n                                                }}\n                                            >\n                                                <RemoveIcon color=\"primary\" />\n                                            </span>\n                                        </div>\n                                    </div>\n                                    <Typography\n                                        style={{\n                                            textAlign: 'center',\n                                            marginTop: '24px',\n                                        }}\n                                    >\n                                        Total:{' '}\n                                        {productInfo &&\n                                            (\n                                                productInfo.quantity *\n                                                productInfo.price\n                                            ).toFixed(2)}\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    </div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'center',\n                            paddingBottom: '24px',\n                        }}\n                    >\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            size=\"large\"\n                            onClick={() => {\n                                props.updateCart(productInfo)\n                                return setProductInfo(null)\n                            }}\n                            style={{ marginRight: '16px' }}\n                        >\n                            Add to cart\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"secondary\"\n                            size=\"large\"\n                            onClick={() => setProductInfo(null)}\n                        >\n                            Close\n                        </Button>\n                    </div>\n                </SwipeableDrawer>\n\n                <div className={classes.heroContent}>\n                    <Container maxWidth=\"sm\">\n                        <Typography\n                            component=\"h1\"\n                            variant=\"h2\"\n                            align=\"center\"\n                            color=\"textPrimary\"\n                            gutterBottom\n                        >\n                            The Yummi Pizza\n                        </Typography>\n                        <Typography\n                            variant=\"h5\"\n                            align=\"center\"\n                            color=\"textSecondary\"\n                            paragraph\n                        >\n                            Your best decision!\n                        </Typography>\n                    </Container>\n                </div>\n                <Container className={classes.cardGrid} maxWidth=\"md\">\n                    <Grid container spacing={4}>\n                        {productStatus === 'success' ? (\n                            products.map((product) => (\n                                <Grid\n                                    item\n                                    key={product.id}\n                                    xs={12}\n                                    sm={6}\n                                    md={4}\n                                >\n                                    <Card className={classes.card}>\n                                        <CardMedia\n                                            className={classes.cardMedia}\n                                            image={product.imageUrl}\n                                            title=\"Image title\"\n                                        />\n                                        <CardContent\n                                            className={classes.cardContent}\n                                        >\n                                            <Typography\n                                                gutterBottom\n                                                variant=\"h5\"\n                                                component=\"h2\"\n                                            >\n                                                {product.title}\n                                            </Typography>\n                                            <Typography>\n                                                {product.description}\n                                            </Typography>\n                                            <Typography color=\"primary\">\n                                                ${product.price}\n                                            </Typography>\n                                        </CardContent>\n                                        <CardActions>\n                                            <Button\n                                                size=\"small\"\n                                                color=\"primary\"\n                                                onClick={() =>\n                                                    setProductInfo({\n                                                        ...product,\n                                                        quantity: 1,\n                                                    })\n                                                }\n                                            >\n                                                View\n                                            </Button>\n                                            {props.isAuth && (\n                                                <Button\n                                                    size=\"small\"\n                                                    color=\"primary\"\n                                                >\n                                                    Edit\n                                                </Button>\n                                            )}\n                                        </CardActions>\n                                    </Card>\n                                </Grid>\n                            ))\n                        ) : productStatus === 'loading' ? (\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    flexGrow: 1,\n                                    alignItems: 'center',\n                                    justifyContent: 'center',\n                                }}\n                            >\n                                <Spinner color=\"danger\" />\n                            </div>\n                        ) : productStatus === 'error' ? (\n                            <p>Error occurs</p>\n                        ) : null}\n                    </Grid>\n                </Container>\n            </main>\n            {/* Footer */}\n            <footer className={classes.footer}>\n                <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                    The Yummi Pizza\n                </Typography>\n                <Typography\n                    variant=\"subtitle1\"\n                    align=\"center\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                >\n                    Your best decision!\n                </Typography>\n                <Copyright />\n            </footer>\n            {/* End footer */}\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    ...state.cart,\n    ...state.auth,\n})\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateCart: (products) => dispatch(actions.updateCart(products)),\n        clearCart: () => dispatch(actions.clearCart()),\n        removeCartItem: (item) => dispatch(actions.removeFromCart(item)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage)\n","import axios from 'axios'\n\nexport const getProducts = () =>\n    new Promise((resolve, reject) => {\n        axios\n            .get('/v1/shop/products')\n            .then((products) => {\n                resolve(products.data)\n            })\n            .catch((err) => {\n                reject(err)\n            })\n    })\n\nexport const takeOrder = (data) =>\n    new Promise((resolve, reject) => {\n        axios\n            .post('/v1/shop/orders', data)\n            .then((res) => {\n                resolve(res)\n            })\n            .catch((err) => {\n                reject(err)\n            })\n    })\n","import React from 'react'\nimport { Switch, Route, BrowserRouter, IndexRoute } from 'react-router-dom'\nimport Homepage from './pages/Homepage'\nimport './App.css'\n\nfunction App() {\n    return (\n        <>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\" component={Homepage} />\n                </Switch>\n            </BrowserRouter>\n        </>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport axios from 'axios'\nimport store from './store'\nimport './index.css'\nimport './styles/styles.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\naxios.defaults.baseURL = 'https://the-yummi-pizza-backend.herokuapp.com'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}